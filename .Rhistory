dataForPred$numHospitals <- ifelse(dataForPred$numHospitals >= 3, 1, 0)
colnames(dataForPred)[5] <- "has3OrMoreHospitals"
#Use 10-fold cross-validation for getting alpha/lambda values for glmnet
tControlObj <- caret::trainControl(
method = "cv", number = 10,
verboseIter = TRUE,
summaryFunction = defaultSummary
)
k <- 10
#cross validation for getting performance metrics (RMSE, Rsquared, etc.)
splitPlan <- kWayCrossValidation(nrow(dataForPred), k, NULL, NULL)
metricsDF <- as.data.frame(matrix(nrow = 3, ncol = 4))
names(metricsDF) <- c("Model", "RMSE", "Rsquared", "MAE")
data <- read.csv("explanatoryvariables/predTable.csv")
#remove extraneous columns (e.g. community area name)
dataForPred <- dplyr::select(data, -X, -community, -communityAreaNum)
dataForPred <- dataForPred[,1:13]
dataForPred$numHospitals <- ifelse(dataForPred$numHospitals >= 3, 1, 0)
colnames(dataForPred)[5] <- "has3OrMoreHospitals"
#Use 10-fold cross-validation for getting alpha/lambda values for glmnet
tControlObj <- caret::trainControl(
method = "cv", number = 10,
verboseIter = TRUE,
summaryFunction = defaultSummary
)
k <- 10
#cross validation for getting performance metrics (RMSE, Rsquared, etc.)
splitPlan <- kWayCrossValidation(nrow(dataForPred), k, NULL, NULL)
metricsDF <- as.data.frame(matrix(nrow = 3, ncol = 4))
names(metricsDF) <- c("Model", "RMSE", "Rsquared", "MAE")
modelLM <- train(
x = dataForPred[,2:13],
y = dataForPred[,1],
method = "lm",
trControl = tControlObj
)
plot(modelLM$finalModel$fitted.values, dataForPred[,1], main='Predicted vs Actual for Simple Linear Regression', xlab='Predicted', ylab='Actual')
plot(modelLM$finalModel$fitted.values, modelLM$finalModel$residuals, main='Residual Plot for Simple Linear Regression', xlab='Predicted', ylab='Residuals')
abline(h = 0, col = "darkgrey", lty = 2)
hist(modelLM$finalModel$residuals,
col='grey',
main='Residual Histogram for Simple Linear Regression',
xlab='Residual', ylab='Frequency')
summary(modelLM)
lmPredValues <- data.frame("predicted" = rep(0, nrow(dataForPred)))
for(i in 1:k) {
split <- splitPlan[[i]]
model <- lm(percentViolentCrimePer1000Population ~ ., data = dataForPred[split$train,])
lmPredValues$predicted[split$app] <- predict(model, newdata = dataForPred[split$app,])
}
metricsDF[1,] <- c("Linear Regression CV", postResample(lmPredValues$predicted, dataForPred[,1]))
metricsDF[4,] <- c("Linear Regression", postResample(predict(modelLM, dataForPred[2:13]), dataForPred[,1]))
modelLM$finalModel$coefficients
?plot_ly
View(dataForPred)
View(data)
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
View(lmDF)
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#DAA49A',
line = list(color = '#98726B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
library(plotly)
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#DAA49A',
line = list(color = '#98726B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
View(p)
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#DAA49A',
line = list(color = '#01AB1D',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#37D852',
line = list(color = '#019C1B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#019C1B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
?abline
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) %>%
geom_vline(aes(yintercept=0),   # Ignore NA values for mean
color="gray", linetype="dashed", size=1)  %>%
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) +
geom_vline(aes(yintercept=0),   # Ignore NA values for mean
color="gray", linetype="dashed", size=1)  %>%
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
?plot_ly
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2)))
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
htmlwidgets::saveWidget(as_widget(p), "regressionResidual.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
htmlwidgets::saveWidget(as_widget(p), "regressionResidual.html")
#Import data: includes explanatory variables AND class variable but also other columns (e.g. community area name)
data <- read.csv("4A/MSCI 446/R/explanatoryvariables/predTable.csv")
#remove extraneous columns (e.g. community area name)
dataForPred <- dplyr::select(data, -X, -community, -communityAreaNum)
dataForPred <- dataForPred[,1:13]
dataForPred$numHospitals <- ifelse(dataForPred$numHospitals >= 3, 1, 0)
colnames(dataForPred)[5] <- "has3OrMoreHospitals"
#Use 10-fold cross-validation for getting alpha/lambda values for glmnet
tControlObj <- caret::trainControl(
method = "cv", number = 10,
verboseIter = TRUE,
summaryFunction = defaultSummary
)
k <- 10
#cross validation for getting performance metrics (RMSE, Rsquared, etc.)
splitPlan <- kWayCrossValidation(nrow(dataForPred), k, NULL, NULL)
metricsDF <- as.data.frame(matrix(nrow = 3, ncol = 4))
names(metricsDF) <- c("Model", "RMSE", "Rsquared", "MAE")
##########################################
#train using linear regression#
modelLM <- train(
x = dataForPred[,2:13],
y = dataForPred[,1],
method = "lm",
trControl = tControlObj
)
plot(modelLM$finalModel$fitted.values, dataForPred[,1], main='Predicted vs Actual for Simple Linear Regression', xlab='Predicted', ylab='Actual')
plot(modelLM$finalModel$fitted.values, modelLM$finalModel$residuals, main='Residual Plot for Simple Linear Regression', xlab='Predicted', ylab='Residuals')
abline(h = 0, col = "darkgrey", lty = 2)
hist(modelLM$finalModel$residuals,
col='grey',
main='Residual Histogram for Simple Linear Regression',
xlab='Residual', ylab='Frequency')
summary(modelLM)
lmPredValues <- data.frame("predicted" = rep(0, nrow(dataForPred)))
for(i in 1:k) {
split <- splitPlan[[i]]
model <- lm(percentViolentCrimePer1000Population ~ ., data = dataForPred[split$train,])
lmPredValues$predicted[split$app] <- predict(model, newdata = dataForPred[split$app,])
}
metricsDF[1,] <- c("Linear Regression CV", postResample(lmPredValues$predicted, dataForPred[,1]))
metricsDF[4,] <- c("Linear Regression", postResample(predict(modelLM, dataForPred[2:13]), dataForPred[,1]))
modelLM$finalModel$coefficients
##########################################
#plotly
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
htmlwidgets::saveWidget(as_widget(p), "regressionResidual.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
data <- read.csv("explanatoryvariables/predTable.csv")
dataForPred <- dplyr::select(data, -X, -community, -communityAreaNum)
dataForPred <- dataForPred[,1:13]
dataForPred$numHospitals <- ifelse(dataForPred$numHospitals >= 3, 1, 0)
colnames(dataForPred)[5] <- "has3OrMoreHospitals"
#Use 10-fold cross-validation for getting alpha/lambda values for glmnet
tControlObj <- caret::trainControl(
method = "cv", number = 10,
verboseIter = TRUE,
summaryFunction = defaultSummary
)
k <- 10
#cross validation for getting performance metrics (RMSE, Rsquared, etc.)
splitPlan <- kWayCrossValidation(nrow(dataForPred), k, NULL, NULL)
metricsDF <- as.data.frame(matrix(nrow = 3, ncol = 4))
names(metricsDF) <- c("Model", "RMSE", "Rsquared", "MAE")
##########################################
#train using linear regression#
modelLM <- train(
x = dataForPred[,2:13],
y = dataForPred[,1],
method = "lm",
trControl = tControlObj
)
plot(modelLM$finalModel$fitted.values, dataForPred[,1], main='Predicted vs Actual for Simple Linear Regression', xlab='Predicted', ylab='Actual')
plot(modelLM$finalModel$fitted.values, modelLM$finalModel$residuals, main='Residual Plot for Simple Linear Regression', xlab='Predicted', ylab='Residuals')
abline(h = 0, col = "darkgrey", lty = 2)
hist(modelLM$finalModel$residuals,
col='grey',
main='Residual Histogram for Simple Linear Regression',
xlab='Residual', ylab='Frequency')
summary(modelLM)
lmPredValues <- data.frame("predicted" = rep(0, nrow(dataForPred)))
for(i in 1:k) {
split <- splitPlan[[i]]
model <- lm(percentViolentCrimePer1000Population ~ ., data = dataForPred[split$train,])
lmPredValues$predicted[split$app] <- predict(model, newdata = dataForPred[split$app,])
}
metricsDF[1,] <- c("Linear Regression CV", postResample(lmPredValues$predicted, dataForPred[,1]))
metricsDF[4,] <- c("Linear Regression", postResample(predict(modelLM, dataForPred[2:13]), dataForPred[,1]))
modelLM$finalModel$coefficients
##########################################
#plotly
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
htmlwidgets::saveWidget(as_widget(p), "regressionResidual.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
#Import data: includes explanatory variables AND class variable but also other columns (e.g. community area name)
data <- read.csv("explanatoryvariables/predTable.csv")
#remove extraneous columns (e.g. community area name)
dataForPred <- dplyr::select(data, -X, -community, -communityAreaNum)
dataForPred <- dataForPred[,1:13]
#dataForPred$numHospitals <- ifelse(dataForPred$numHospitals >= 3, 1, 0)
#colnames(dataForPred)[5] <- "has3OrMoreHospitals"
#Use 10-fold cross-validation for getting alpha/lambda values for glmnet
tControlObj <- caret::trainControl(
method = "cv", number = 10,
verboseIter = TRUE,
summaryFunction = defaultSummary
)
k <- 10
#cross validation for getting performance metrics (RMSE, Rsquared, etc.)
splitPlan <- kWayCrossValidation(nrow(dataForPred), k, NULL, NULL)
metricsDF <- as.data.frame(matrix(nrow = 3, ncol = 4))
names(metricsDF) <- c("Model", "RMSE", "Rsquared", "MAE")
##########################################
#train using linear regression#
modelLM <- train(
x = dataForPred[,2:13],
y = dataForPred[,1],
method = "lm",
trControl = tControlObj
)
plot(modelLM$finalModel$fitted.values, dataForPred[,1], main='Predicted vs Actual for Simple Linear Regression', xlab='Predicted', ylab='Actual')
plot(modelLM$finalModel$fitted.values, modelLM$finalModel$residuals, main='Residual Plot for Simple Linear Regression', xlab='Predicted', ylab='Residuals')
abline(h = 0, col = "darkgrey", lty = 2)
hist(modelLM$finalModel$residuals,
col='grey',
main='Residual Histogram for Simple Linear Regression',
xlab='Residual', ylab='Frequency')
summary(modelLM)
lmPredValues <- data.frame("predicted" = rep(0, nrow(dataForPred)))
for(i in 1:k) {
split <- splitPlan[[i]]
model <- lm(percentViolentCrimePer1000Population ~ ., data = dataForPred[split$train,])
lmPredValues$predicted[split$app] <- predict(model, newdata = dataForPred[split$app,])
}
metricsDF[1,] <- c("Linear Regression CV", postResample(lmPredValues$predicted, dataForPred[,1]))
metricsDF[4,] <- c("Linear Regression", postResample(predict(modelLM, dataForPred[2:13]), dataForPred[,1]))
modelLM$finalModel$coefficients
##########################################
#plotly
lmDF <- data.frame("fittedValues" = modelLM$finalModel$fitted.values, "actualValues" =  dataForPred[,1], "community" = data[,2], "communityNum" = data[,3])
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Plot for Simple Linear Regression'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
htmlwidgets::saveWidget(as_widget(p), "regressionResidual.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
xbins = 7,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
xbins = 6,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
size = 6,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
?plot_ly
np <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
nbinsx = 6,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
xbins.start = -600,
xbins.end = 800,
xbins.size = 7,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
# xbins.start = -600,
# xbins.end = 800,
# xbins.size = 7,
nbinsx = 7,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram for Simple Linear Regression'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = ~actualValues,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2))) %>%
layout(title = paste('Predicted vs Actual'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Actual'))
htmlwidgets::saveWidget(as_widget(p), "regressionPredictedVsActual.html")
p <- plot_ly(data = lmDF, x = ~fittedValues,
y = modelLM$finalModel$residuals,
text = ~paste(communityNum, community),
marker = list(size = 10,
color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Plot'),
xaxis = list(title = 'Predicted'),
yaxis = list(title = 'Residual'))
htmlwidgets::saveWidget(as_widget(p), "regressionResidual.html")
p <- plot_ly(x = modelLM$finalModel$residuals, type = "histogram",
# xbins.start = -600,
# xbins.end = 800,
# xbins.size = 7,
nbinsx = 7,
marker = list(color = '#439F53',
line = list(color = '#306F3B',
width = 2)))  %>%
layout(title = paste('Residual Histogram'),
xaxis = list(title = 'Residual'),
yaxis = list(title = 'Frequency'))
htmlwidgets::saveWidget(as_widget(p), "regressionHistogram.html")
